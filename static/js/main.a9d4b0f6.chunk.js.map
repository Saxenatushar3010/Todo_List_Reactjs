{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setstatus","value","onChange","event","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","ele","filter","console","log","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","localStorage","getItem","setItem","JSON","stringify","todolocal","parse","getLocalTodos","filterHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9d4b0f6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Form({setInputText,todos,setTodos,inputText,setstatus}){\r\n  function inputTextHandler(event) {\r\n    setInputText(event.target.value);\r\n  };\r\n  function submitTodoHandler(event) {\r\n    event.preventDefault(); // prevents form refreshing the page every time we press button\r\n    setTodos([...todos,\r\n      {text: inputText,completed: false,id: Math.random()*1000}  ], // spreading already present tasks\r\n       // inserting a new task {math.random just gives a random id to the new task}\r\n      );\r\n      setInputText(\"\"); // set the input text back to empty after clicking the add button\r\n  }\r\n\r\n  function statusHandler(event){ // every time the drop button value changes its activated\r\n    setstatus(event.target.value);\r\n  }\r\n\r\n\r\n    return(\r\n        <form>\r\n        <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n        <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n          <i className=\"fas fa-plus-square\"></i>\r\n        </button>\r\n        <div className=\"select\">\r\n          <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"uncompleted\">Uncompleted</option>\r\n          </select>\r\n        </div>\r\n      </form> \r\n    );\r\n}\r\n\r\nexport default Form;","import React from \"react\"\r\n\r\nfunction Todo({text,todo,todos,setTodos}){\r\n\r\n    // event handlers\r\n    function deleteHandler(){\r\n        // we search which ele we clicked on and will remove it\r\n        setTodos(todos.filter((ele) => ele.id !==todo.id));\r\n        console.log(todo);\r\n    }\r\n    function completeHandler(){\r\n        // traversing over each item and checking if we clicked on the tick then set that items state to completed\r\n        setTodos(todos.map((ele) => {\r\n            if(ele.id===todo.id){\r\n                return {\r\n                    ...ele,completed: !ele.completed, // keep all prop of curr item as it is and change the completed status \r\n                }\r\n            }\r\n            return ele;\r\n        }))\r\n    }\r\n    // in the first item we are checking if the curr item is completed we add dynamically completed class in it\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : ''}`}>{text}</li> \r\n            <button onClick={completeHandler} className=\"complete-btn\"><i className=\"fas fa-check\"></i></button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\"><i className=\"fas fa-trash\"></i></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React from \"react\"\r\n// importing components\r\nimport Todo from \"./Todo\";  \r\nfunction TodoList({todos,setTodos,filteredTodos}){\r\n    return (\r\n        <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">\r\n      {filteredTodos.map((todo => (\r\n        <Todo \r\n        setTodos={setTodos}\r\n        todos={todos}\r\n        key={todo.id}\r\n        todo={todo}\r\n        text={todo.text}/>  // everytime we click button we generate a new ele because of this\r\n      )))}\r\n      </ul> \r\n    </div>\r\n    );\r\n}\r\nexport default TodoList;","import React, { useState,useEffect } from \"react\";\nimport './App.css';\n// importing components\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\nfunction App() {\n  const [inputText,setInputText]=useState(\"\");\n  const [todos,setTodos]=useState([]);  \n  const [status,setstatus]=useState(\"all\"); // used to change the state on the basis of task done or not\n  const [filteredTodos,setFilteredTodos]=useState([]);\n\n  // run once and get already present items in local storage\n  useEffect(() => {\n    getLocalTodos();\n  },[]);\n\n  // useeffect is used here as every time our todos changes or status changes the function executes again\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  },[todos,status]);\n  \n  // save to local so that it don't vanish after refreshing \n  function saveLocalTodos(){\n    localStorage.setItem(\"todos\",JSON.stringify(todos));\n  }\n  function getLocalTodos(){\n    if(localStorage.getItem(\"todos\")===null){\n      localStorage.setItem(\"todos\",JSON.stringify([]));\n    }\n    else{\n      let todolocal=JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todolocal);\n    }\n  }\n  function filterHandler(){\n    switch(status){\n      case 'completed':\n        setFilteredTodos(todos.filter( todo => todo.completed===true));\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter( todo => todo.completed===false));\n        break;\n      default:\n        setFilteredTodos(todos); // nothing\n        break;  \n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Todo List</h1>\n      </header>\n      <Form \n      inputText={inputText} \n      todos={todos} \n      setTodos={setTodos} \n      setInputText={setInputText}\n      setstatus={setstatus}\n      />\n      <TodoList \n      setTodos={setTodos} \n      todos={todos} \n      filteredTodos={filteredTodos}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}